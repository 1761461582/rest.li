dependencies {
    compile project (':r2')
    compile project (':r2-sample')
    compile project (':test-util')
    testCompile project(path: ':r2', configuration: 'testArtifacts')
    testCompile externalDependency.testng
}

// Build tasks for running PRPC and HTTP servers and perf tests
['Http'].each { proto ->
    def props = System.properties.findAll { k,_ -> k.startsWith('perf.') }

    // Define server tasks
    task("run${proto}Server", dependsOn: 'testClasses', type: JavaExec) {
        def gclogdir = rootDir.toString() + '/build/r2-int-test/logs/gc'
        mkdir (gclogdir)
        jvmArgs '-verbose:gc', '-Xloggc:'+gclogdir+'/gc.log', '-XX:+PrintGCDetails', '-XX:+PrintGCDateStamps'
        main = "test.r2.perf.driver.Run${proto}Server"
        description = "Runs the ${proto} server"
        classpath = sourceSets.main.runtimeClasspath + sourceSets.test.runtimeClasspath
        systemProperties += props
    }.doFirst { println "\n=== Starting ${proto} server ===\n" }

    // Define client tasks
    ['Rpc', 'Rest'].each { style ->
        task("run${proto}${style}Client", dependsOn: 'testClasses', type: JavaExec) {
            main = "test.r2.perf.driver.Run${proto}${style}Client"
            description = "Runs ${proto} client for ${style.toUpperCase()}"
            classpath = sourceSets.main.runtimeClasspath + sourceSets.test.runtimeClasspath
            systemProperties += props
        }.doFirst { println "\n=== Starting ${proto} ${style.toUpperCase()} client ===\n" }
    }

    // Define perf test tasks
    ['Rpc', 'Rest'].each { style ->
        task("perf${proto}${style}", dependsOn: 'testClasses', type: JavaExec) {
            main = "test.r2.perf.driver.GradlePerfTestDriver"
            args = ["test.r2.perf.driver.Run${proto}Server", "test.r2.perf.driver.Run${proto}${style}Client"]
            description = "Runs ${style.toUpperCase()} perf tests for ${proto}"
            classpath = sourceSets.main.runtimeClasspath + sourceSets.test.runtimeClasspath
            systemProperties += props
        }.doFirst { println "\n=== Starting perf test for ${proto} ${style.toUpperCase()} ===\n" }
    }

}
