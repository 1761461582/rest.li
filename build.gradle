ext.build_script_dir = "${projectDir.path}/build_script"

ext.isDefaultEnvironment = !project.hasProperty('overrideBuildEnvironment')
 
File getEnvironmentScript()
{
  final File env = file(isDefaultEnvironment ? 'defaultEnvironment.gradle' : project.overrideBuildEnvironment)
  assert env.isFile() : "The environment script [$env] does not exists or is not a file."
  return env
}

apply from: environmentScript

ext.externalDependency = [
  'avro': 'org.apache.avro:avro:1.4.0',
  'cglib': 'cglib:cglib-nodep:2.2',
  'codemodel': 'com.sun.codemodel:codemodel:2.2',
  'commonsCli': 'commons-cli:commons-cli:1.0',
  'commonsCodec': 'commons-codec:commons-codec:1.3',
  'commonsHttpClient': 'commons-httpclient:commons-httpclient:3.1',
  'commonsIo': 'commons-io:commons-io:1.4',
  'commonsLang': 'commons-lang:commons-lang:2.4',
  'easymock': 'org.easymock:easymock:2.4',
  'easymockClassExtension': 'org.easymock:easymock-class-extension:2.4',
  'googleCollections': 'com.google.collections:google-collections:1.0-rc2',
  'jacksonCoreAsl': 'org.codehaus.jackson:jackson-core-asl:1.4.2',
  'jacksonMapperAsl': 'org.codehaus.jackson:jackson-mapper-asl:1.4.2',
  'javaxInject': 'javax.inject:javax.inject:1',
  'jdkTools': files("${System.getProperty('java.home')}/../lib/tools.jar"),
  'jetty': 'org.mortbay.jetty:jetty:6.1.26',
  'jettyUtil': 'org.mortbay.jetty:jetty-util:6.1.26',
  'json': 'org.json:json:20070829',
  'log4j': 'log4j:log4j:1.2.15',
  'mina': 'org.apache.mina:mina-core:1.1.7',
  'netty': 'org.jboss.netty:netty:3.2.3.Final',
  'parseq': 'com.linkedin.parseq:parseq:0.4.5',
  'servletApi': 'javax.servlet:servlet-api:2.5',
  'slf4jApi': 'org.slf4j:slf4j-api:1.6.2',
  'slf4jLog4j12': 'org.slf4j:slf4j-log4j12:1.6.2',
  'testng': 'org.testng:testng:6.4',
  'velocity': 'org.apache.velocity:velocity:1.5-LIN0',
  'zookeeper': 'org.apache.zookeeper:zookeeper:3.3.0'
];

if (!isDefaultEnvironment)
{
  spec.external.each { overrideDepKey, overrideDepValue ->
    if (externalDependency[overrideDepKey] != null)
    {
      externalDependency[overrideDepKey] = overrideDepValue
    }
  }
}
  
allprojects {
  apply plugin: 'idea'
  apply plugin: 'eclipse'

  tasks.withType(Compile).all { Compile compile ->
    compile.options.compilerArgs = ['-Xlint', '-Xlint:-path', '-Werror']
  }
}

subprojects {
  apply plugin: 'java'

  sourceCompatibility = JavaVersion.VERSION_1_6

  configurations {
    compile {
      transitive = false
    }

    testArtifacts
  }

  // Default dependencies for all subprojects
  dependencies {
    compile externalDependency.slf4jApi
    runtime externalDependency.slf4jLog4j12
    runtime externalDependency.log4j
  }

  if (isDefaultEnvironment)
  {
    task sourcesJar(type: Jar, dependsOn: classes) {
      from sourceSets.main.allSource
      classifier = 'sources'
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
      from javadoc.destinationDir
      classifier = 'javadoc'
    }

    artifacts {
      archives sourcesJar
      archives javadocJar
    }
  }

  task testJar(type: Jar){
    from sourceSets.test.output
    classifier = 'tests'
  }

  artifacts {
    testArtifacts testJar
  }

  // Configure the IDEA plugin to (1) add the codegen as source dirs and (2) work around
  // an apparent bug in the plugin which doesn't set the outputDir/testOutputDir as documented
  idea.module {
    // Gradle docs claim the two settings below are the default, but
    // the actual defaults appear to be "out/production/$MODULE_NAME"
    // and "out/test/$MODULE_NAME". Changing it so IDEA and gradle share
    // the class output directory.

    outputDir = sourceSets.main.output.classesDir
    testOutputDir = sourceSets.test.output.classesDir
  }

  test {
	  maxHeapSize = '1g'

    useTestNG() {
      excludeGroups 'not_implemented'
      excludeGroups 'integration'
      excludeGroups 'integration_external_product_dependent'
	  excludeGroups 'known_issue'
    }
  }

  task integrationTests(type: Test) {
    useTestNG() {
      includeGroups 'integration'
      excludeGroups 'integration_external_product_dependent'
    }
  }

  //all functional tests which are expected to pass assuming proper environment setup
  task allTests(type: Test) {
	  maxHeapSize = '1g'

    useTestNG() {
      excludeGroups 'known_issue'
      excludeGroups 'not_implemented'
    }
  }


  task integrationExternalProductDependentTests(type: Test) {
    useTestNG() {
      includeGroups 'integration_external_product_dependent'
    }
  }

  task notImplementedFeaturesTests(type: Test) {
    useTestNG() {
      includeGroups 'not_implemented'
    }
  }

  task knownIssuesTests(type: Test) {
	  useTestNG() {
      includeGroups 'known_issue'
	  }
  }

  task allFailingTests(type: Test) {
    useTestNG() {
      includeGroups 'known_issue'
      includeGroups 'not_implemented'
    }
  }

  task cleanBuildDir(type: Exec){
    delete(rootDir.toString()+'build')
    commandLine = ['rm', '-rf', rootDir.toString() + '/build']
    workingDir = file(rootDir.toString())
  }

  task makedir(type:Exec){
    // gradle mkdir does not create dir with "-p" flag on so this is a generic task that takes -Ddirpath=..... parameter
    // Usage examples:
    // gradle makedir -Ddirpath=abc/xyz
    def dir = System.getProperties()['dirpath'] ?: null
    if (dir != null){
      commandLine = ['mkdir','-p', dir]
      workingDir = file(rootDir.toString())
    }
  }
}